{"ts":1373427756309,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// TODO: language support detection by NLTK\n\n/**\n * @name CCNY Senior Project\n * @authors: Emilie Bodden, Sahat Yalkabov\n * @contributors: Emilie Chen, Hannah PyCon\n * @date May 5, 2013\n */\nvar async = require('async'),\n    AWS = require('aws-sdk'),\n    email = require('emailjs'),\n    express = require('express'),\n    filesize = require('filesize'),\n    Dropbox = require('dropbox'),\n    http = require('http'),\n    fs = require('fs'),\n    moment = require('moment'),\n    mongoose = require('mongoose'),\n    MongoStore = require('connect-mongo')(express),\n    path = require('path'),\n    passport = require('passport'),\n    GoogleStrategy = require('passport-google-oauth').OAuth2Strategy,\n    request = require('request'),\n    _ = require('underscore');\n\n\nvar config = require('./config'),\n    User = require('./schema').User,\n    FileSchema = require('./schema').File;\n\n\nvar app = express();\n\n\n// Connect to MongoDB\n// TODO: MONGOLAB IS NOW USING GOOGL E CLOUD PLATFORM as host name is cloudbucket\nmongoose.connect(config.MONGOLAB);\n\nvar File = mongoose.model('File', FileSchema);\n\n// Load Amazon AWS credentials\nAWS.config.loadFromPath('./aws.json');\n\n/**\n * In this example, only the Google ID is serialized to the session,\n * keeping the amount of data stored within the session small.\n * When subsequent requests are received, this ID is used to find the user,\n * which will be restored to req.user.\n */\npassport.serializeUser(function(user, done) {\n  done(null, user.googleId);\n});\n\npassport.deserializeUser(function(googleId, done) {\n  User.findOne({ 'googleId': googleId }, function(err, user) {\n    done(err, user);\n  });\n});\n\n\n/**\n * Use the GoogleStrategy within Passport.\n * Strategies in Passport require a `verification` function, which accept\n * credentials (in this case, an accessToken, refreshToken, and Google\n * profile), and invoke a callback 'done' with a user object.\n */\npassport.use(new GoogleStrategy({\n    clientID: config.GOOGLE_CLIENT_ID,\n    clientSecret: config.GOOGLE_CLIENT_SECRET,\n    callbackURL: \"http://localhost:3000/auth/google/callback\"\n    //callbackURL: \"http://semanticweb.aws.af.cm/auth/google/callback\"\n  },\n  function(accessToken, refreshToken, profile, done) {\n    process.nextTick(function () {\n      User.findOne({ 'googleId': profile.id }, function(err, existingUser) {\n        if(existingUser) {\n          console.log('User: ' + existingUser.displayName + ' found and logged in!');\n          done(null, existingUser);\n        } else {\n          var newUser = new User({\n            googleId: profile.id,\n            accessToken: accessToken,\n            displayName: profile.displayName,\n            link: profile._json.link,\n            picture: profile._json.picture,\n            gender: profile._json.gender,\n            email: profile._json.email,\n            locale: profile._json.locale,\n            verified: profile._json.verified_email\n          });\n          newUser.save(function(err) {\n            if(err) return err;\n            console.log('New user: ' + newUser.displayName + ' created and logged in!');\n            done(null, newUser);\n          });\n        }\n      });\n    });\n  }\n));\n\n\n// Express Configuration\napp.set('port', process.env.PORT || 3000);\napp.set('views', __dirname + '/views');\napp.set('view engine', 'jade');\napp.use(express.favicon());\napp.use(express.logger('dev'));\napp.use(express.bodyParser({\n  uploadDir: __dirname,\n  keepExtensions: true\n}));\napp.use(express.cookieParser());\napp.use(express.session({\n  secret: 'LOLCATS',\n  store: new MongoStore({ url: config.MONGOLAB })\n}));\napp.use(passport.initialize());\napp.use(passport.session());\napp.use(express.methodOverride());\napp.use(app.router);\napp.use(express.static(path.join(__dirname, 'public'), { maxAge: 99999 }));\napp.enable('jsonp callback');\napp.use(function (req, res, next) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept');\n  next();\n});\n\n\n// Express development configuration\nif ('development' === app.get('env')) {\n  app.use(express.errorHandler());\n}\n\n\n/**\n * Simple route middleware to ensure user is authenticated.\n * Use this route middleware on any resource that needs to be protected.  If\n * the request is authenticated (typically via a persistent login session),\n * the request will proceed.  Otherwise, the user will be redirected to the\n * login page.\n */\nfunction ensureAuthenticated(req, res, next) {\n  if (req.isAuthenticated()) { return next(); }\n  res.redirect('/login');\n}\n\n\n/**\n * @route GET /index\n */\napp.get('/', function(req, res) {\n  if (req.user) {\n    // Documents returned from queries with the lean option enabled are plain javascript objects, not MongooseDocuments.\n    // They have no save method, getters/setters or other Mongoose magic applied.\n    // And most importantly they are mutable, which allows us to apply formatting.\n    File.find({ user: req.user.googleId }).lean().exec(function(err, files) {\n\n      // Prettify file sizes\n      _.each(files, function(file) {\n        file.size = filesize(file.size);\n        file.lastModified = moment(file.lastModified).fromNow();\n      });\n      console.log(files);\n      res.render('index', {\n        user: req.user,\n        files: files\n      });\n    });\n  } else {\n    res.render('index', { user: req.user });\n  }\n});\n\n\n/**\n * @route GET /account\n */\napp.get('/account', ensureAuthenticated, function(req, res){\n  res.render('settings', { user: req.user, active: 'active' });\n});\n\n\n/**\n * @route GET /login\n */\napp.get('/login', function(req, res){\n  res.render('/', { user: req.user });\n});\n\n\n/**\n * @route GET /logout\n */\napp.get('/logout', function(req, res){\n  req.logout();\n  res.redirect('/');\n});\n\n/**\n * @route GET /auth/google\n * Use passport.authenticate() as route middleware to authenticate the\n * request.  The first step in Google authentication will involve\n * redirecting the user to google.com.  After authorization, Google\n * will redirect the user back to this application at /auth/google/callback\n */\napp.get('/auth/google', passport.authenticate('google', {\n  scope: [\n    'https://www.googleapis.com/auth/userinfo.profile',\n    'https://www.googleapis.com/auth/userinfo.email'\n  ]\n}), function (req, res) {\n  // The request will be redirected to Google for authentication, so this\n  // function will not be called.\n});\n\n/**\n * GET /auth/google/callback\n * Use passport.authenticate() as route middleware to authenticate the\n * request.  If authentication fails, the user will be redirected back to the\n * login page.  Otherwise, the primary route function function will be called,\n * which, in this example, will redirect the user to the home page.\n */\napp.get('/auth/google/callback',\n  passport.authenticate('google', { failureRedirect: '/login'}), function (req, res) {\n  res.redirect('/');\n});\n\napp.get('/search', function(req, res) {\n  res.render('search');\n});\n\n\napp.post('/search', function(req, res) {\n  User.search({ query: 'sahat' }, function(err, results) {\n\n  });\n\n  request.get('http://elastic-sahat.rhcloud.com', function(error, response, body) {\n    res.send(body);\n  });\n});\n\n\n/**\n * Creates a new user account\n * @param Full Name, Username, Email, Password\n * @return 200 OK\n */\napp.post('/signup', function(req, res) {\n  var user = new User({\n    fullName: req.body.name,\n    email: req.body.email,\n    password: req.body.password\n  });\n\n  user.save(function (err) {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log('User has been successfully created');\n    }\n  });\n\n  res.end();\n});\n\n/**\n * Creates a new file object for a given user\n * @param Username\n * @return 200 OK\n */\napp.post('/files', function(req, res) {\n  var path = '';\n\n  // Windows uses backslash for file path, Linux uses forward slashuuuuuuiuhiu\n  if (process.platform.match(/^win/)) {\n     path = req.files.myFile.path.split(\"\\\\\").slice(-1).join(\"\\\\\");\n  } else {\n     path = req.files.myFile.path.split(\"/\").slice(-1).join(\"/\");\n  }\n\n  var file = {\n    name: req.files.myFile.name,\n    extension: path.split('.')[1].toLowerCase(),\n    type: req.files.myFile.type,\n    size: req.files.myFile.size,\n    path: path,\n    lastModified: req.files.myFile.lastModifiedDate,\n    user: req.user.googleId\n  };\n\n  fs.readFile(path, function (err, data) {\n    if (err) return res.send(500, err);\n\n    var s3 = new AWS.S3({ params: { Bucket: 'semanticweb' } });\n\n    s3.createBucket(function() {\n      s3.putObject({ Key: path, Body: data }, function(err, data) {\n        if (err) {\n          console.log(\"Error uploading data: \", err);\n        } else {\n          console.log(\"Successfully uploaded data to semanticweb\");\n\n          // send a request to python cluster\n          request.post({ url: 'http://127.0.0.1:5000', \n            form: { path:path, extension:path.split('.')[1].toLowerCase() } }, function(e, r, body) {\n            \n\n\n            console.log(body);\n            // Save to MongoDB (OK to be asynchronous)\n            var mongoFile = new File(file);\n\n            // NLP analysis on file to generate keywords\n            var tags = JSON.parse(body).tags\n            console.log(tags);\n            var myArr = tags;\n            mongoFile.keywords = tags;\n\n            // nltk analysis to generate summary\n            mongoFile.summary = 'Quick document summary goes here';\n\n            mongoFile.save(function(err) {\n              if (err) return res.send(500, err);\n              console.log('Saved file metadata to MongoDB successfully')\n            });\n\n            res.redirect('/');\n\n\n          });\n          console.log('Sent a POST request to Python');\n\n          // delete temp file on disk, now that it is on S3\n          fs.unlink(path, function (err) {\n            if (err) return res.send(500, err);\n            console.log('successfully deleted temp file');\n          });\n\n        }\n      });\n    });\n  });\n\n  \n});\n\n// Update all files for a specified user\napp.put('/files', function(req, res) {\n  var user = req.params.user;\n\n});\n\n// Retrieve detailed info about a file\napp.get('/files/:id', function(req, res) {\n  File.findOne({ '_id': req.params.id }, function(err, file) {\n    if (file) {\n      res.render('detail', {\n        user: req.user,\n        file: file\n      });\n    } else {\n      res.redirect('/');\n    }\n  });\n});\n\n// Update a given file for specified user\napp.put('/files/:id', function(req, res) {\n  var user = req.params.user;\n  var fileId = req.params.id;\n});\n\n/**\n * Deletes a file object for a given user\n * @param Username\n * @param File ID\n * @return 200 OK\n */\napp.del('/files/:id', function(req, res) {\n  var user = req.params.user;\n  var fileId = req.params.id;\n});\n\n\n\nhttp.createServer(app).listen(app.get('port'), function(){\n  console.log('Express server listening on port ' + app.get('port'));\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":10910}]],"length":10910}
{"contributors":[],"silentsave":true,"ts":1373428370965,"patch":[[{"diffs":[[0,"web."],[-1,"aws.af.cm"],[1,"sahat.c9.io"],[0,"/aut"]],"start1":2115,"start2":2115,"length1":17,"length2":19},{"diffs":[[0,"rr, data) {\n"],[-1,"    "],[0,"if (err) ret"]],"start1":8396,"start2":8396,"length1":28,"length2":24}]],"length":10908,"saved":false}
{"ts":1373428373308,"patch":[[{"diffs":[[0,"ck\"\n    "],[-1,"//"],[0,"callback"]],"start1":2076,"start2":2076,"length1":18,"length2":16}]],"length":10906,"saved":false}
{"ts":1373428374664,"patch":[[{"diffs":[[0,"SECRET,\n    "],[1,"//"],[0,"callbackURL:"]],"start1":2010,"start2":2010,"length1":24,"length2":26}]],"length":10908,"saved":false}
{"ts":1373558831647,"patch":[[{"diffs":[[0,"p.get('/"],[1,"fil"],[0,"', funct"]],"start1":4674,"start2":4674,"length1":16,"length2":19}]],"length":10911,"saved":false}
{"ts":1373558832875,"patch":[[{"diffs":[[0,"p.get('/"],[-1,"fil"],[0,"', funct"]],"start1":4674,"start2":4674,"length1":19,"length2":16}]],"length":10908,"saved":false}
{"ts":1373558837867,"patch":[[{"diffs":[[0,"p.get('/"],[1,"fff"],[0,"', funct"]],"start1":4674,"start2":4674,"length1":16,"length2":19}]],"length":10911,"saved":false}
{"contributors":[],"silentsave":false,"ts":1373581384231,"patch":[[{"diffs":[[0,"t('/"],[-1,"fff"],[0,"', f"]],"start1":4678,"start2":4678,"length1":11,"length2":8}]],"length":10908,"saved":false}
{"contributors":[],"silentsave":true,"ts":1373651825446,"patch":[[{"diffs":[[0,") {\n"],[-1,"    // Documents returned from queries with the lean option enabled are plain javascript objects, not MongooseDocuments.\n    // They have no save method, getters/setters or other Mongoose magic applied.\n    // And most importantly they are mutable, which allows us to apply formatting."],[0,"\n   "]],"start1":4720,"start2":4720,"length1":293,"length2":8}]],"length":10623,"saved":false}
{"ts":1373651828837,"patch":[[{"diffs":[[0,"req.user) {\n"],[-1,"\n"],[0,"    File.fin"]],"start1":4712,"start2":4712,"length1":25,"length2":24}]],"length":10622,"saved":false}
{"ts":1373651832465,"patch":[[{"diffs":[[0,"ogleId }"],[1,", "],[0,").lean()"]],"start1":4757,"start2":4757,"length1":16,"length2":18}]],"length":10624,"saved":false}
{"ts":1373651834928,"patch":[[{"diffs":[[0,"leId }, "],[1,"{}"],[0,").lean()"]],"start1":4759,"start2":4759,"length1":16,"length2":18}]],"length":10626,"saved":false}
{"ts":1373651836718,"patch":[[{"diffs":[[0,"eId }, {"],[1," lean:"],[0,"}).lean("]],"start1":4760,"start2":4760,"length1":16,"length2":22}]],"length":10632,"saved":false}
{"ts":1373651838331,"patch":[[{"diffs":[[0," { lean:"],[1," true"],[0,"}).lean("]],"start1":4766,"start2":4766,"length1":16,"length2":21}]],"length":10637,"saved":false}
{"ts":1373651839033,"patch":[[{"diffs":[[0,"an: true"],[1," "],[0,"}).lean("]],"start1":4771,"start2":4771,"length1":16,"length2":17}]],"length":10638,"saved":false}
{"ts":1373651841020,"patch":[[{"diffs":[[0,": true }"],[1,", "],[0,").lean()"]],"start1":4773,"start2":4773,"length1":16,"length2":18}]],"length":10640,"saved":false}
{"ts":1373651844054,"patch":[[{"diffs":[[0," }, "],[-1,").lean().exec("],[0,"func"]],"start1":4779,"start2":4779,"length1":22,"length2":8}]],"length":10626,"saved":false}
{"ts":1373651928620,"patch":[[{"diffs":[[0,"req.user) {\n"],[1,"    // Documents returned from queries with the lean option enabled are plain javascript objects, not MongooseDocuments.\n    // They have no save method, getters/setters or other Mongoose magic applied.\n    // And most importantly they are mutable, which allows us to apply formatting.\n"],[0,"    File.fin"]],"start1":4712,"start2":4712,"length1":24,"length2":310},{"diffs":[[0,"Id }"],[-1,", { lean: true }, "],[1,").lean().exec("],[0,"func"]],"start1":5047,"start2":5047,"length1":26,"length2":22}]],"length":10908,"saved":false}
{"ts":1373651958696,"patch":[[{"diffs":[[0,"ng.\n    File"],[1,"\n    "],[0,".find({ user"]],"start1":5006,"start2":5006,"length1":24,"length2":29}]],"length":10913,"saved":false}
{"ts":1373651962257,"patch":[[{"diffs":[[0,"le\n    ."],[-1,"find"],[1,"where"],[0,"({ user:"]],"start1":5016,"start2":5016,"length1":20,"length2":21}]],"length":10914,"saved":false}
{"ts":1373651964435,"patch":[[{"diffs":[[0,"gleId })"],[1,"\n    "],[0,".lean()."]],"start1":5050,"start2":5050,"length1":16,"length2":21}]],"length":10919,"saved":false}
{"ts":1373651971685,"patch":[[{"diffs":[[0,"   ."],[-1,"where"],[1,"find"],[0,"({ u"]],"start1":5020,"start2":5020,"length1":13,"length2":12}]],"length":10918,"saved":false}
{"ts":1373651974342,"patch":[[{"diffs":[[0,"le\n    ."],[-1,"find"],[1,"where"],[0,"({ user:"]],"start1":5016,"start2":5016,"length1":20,"length2":21}]],"length":10919,"saved":false}
{"ts":1373651976657,"patch":[[{"diffs":[[0," .lean()"],[1,"\n    "],[0,".exec(fu"]],"start1":5062,"start2":5062,"length1":16,"length2":21}]],"length":10924,"saved":false}
{"ts":1373651978100,"patch":[[{"diffs":[[0,"leId })\n"],[1,"    \n"],[0,"    .lea"]],"start1":5051,"start2":5051,"length1":16,"length2":21}]],"length":10929,"saved":false}
{"ts":1373651979339,"patch":[[{"diffs":[[0," })\n    "],[1,"."],[0,"\n    .le"]],"start1":5055,"start2":5055,"length1":16,"length2":17}]],"length":10930,"saved":false}
{"ts":1373651982463,"patch":[[{"diffs":[[0,"})\n    ."],[1,"sort('')"],[0,"\n    .le"]],"start1":5056,"start2":5056,"length1":16,"length2":24}]],"length":10938,"saved":false}
{"ts":1373651991912,"patch":[[{"diffs":[[0," .sort('"],[1,"name"],[0,"')\n    ."]],"start1":5062,"start2":5062,"length1":16,"length2":20}]],"length":10942,"saved":false}
{"ts":1373652037460,"patch":[[{"diffs":[[0,"ort('nam"],[-1,"e"],[0,"')\n    ."]],"start1":5065,"start2":5065,"length1":17,"length2":16}]],"length":10941,"saved":false}
{"ts":1373652038364,"patch":[[{"diffs":[[0,"ort('nam"],[1,"e"],[0,"')\n    ."]],"start1":5065,"start2":5065,"length1":16,"length2":17}]],"length":10942,"saved":false}
{"ts":1373652062748,"patch":[[{"diffs":[[0,"   ."],[-1,"where"],[1,"find"],[0,"({ u"]],"start1":5020,"start2":5020,"length1":13,"length2":12}]],"length":10941,"saved":false}
{"ts":1373652147857,"patch":[[{"diffs":[[0,"iles) {\n"],[-1,"\n"],[0,"      //"]],"start1":5113,"start2":5113,"length1":17,"length2":16}]],"length":10940,"saved":false}
{"ts":1373652167963,"patch":[[{"diffs":[[0,"});\n"],[-1,"      console.log(files);\n"],[0,"    "]],"start1":5299,"start2":5299,"length1":34,"length2":8}]],"length":10914,"saved":false}
{"ts":1373652170255,"patch":[[{"diffs":[[0,"    });\n"],[-1,"      "],[1,"\n"],[0,"res.rend"]],"start1":5295,"start2":5295,"length1":22,"length2":17}]],"length":10909,"saved":false}
{"ts":1373652171883,"patch":[[{"diffs":[[0,"   });\n\n"],[1,"      "],[0,"res.rend"]],"start1":5296,"start2":5296,"length1":16,"length2":22}]],"length":10915,"saved":false}
{"ts":1373652174363,"patch":[[{"diffs":[[0,"r, files) {\n"],[1,"      \n"],[0,"      // Pre"]],"start1":5109,"start2":5109,"length1":24,"length2":31}]],"length":10922,"saved":false}
{"ts":1373652181472,"patch":[[{"diffs":[[0," // "],[-1,"Prettify"],[1,"Format"],[0," fil"]],"start1":5133,"start2":5133,"length1":16,"length2":14}]],"length":10920,"saved":false}
{"ts":1373652192420,"patch":[[{"diffs":[[0,"le s"],[-1,"izes"],[0,"\n   "]],"start1":5146,"start2":5146,"length1":12,"length2":8}]],"length":10916,"saved":false}
{"ts":1373652194206,"patch":[[{"diffs":[[0,"mat file"],[-1," "],[0,"s"],[1,"ize and "],[0,"\n      _"]],"start1":5140,"start2":5140,"length1":18,"length2":25}]],"length":10923,"saved":false}
{"ts":1373652198066,"patch":[[{"diffs":[[0,"ize and "],[1,"last modified date"],[0,"\n      _"]],"start1":5149,"start2":5149,"length1":16,"length2":34}]],"length":10941,"saved":false}
{"ts":1373652204469,"patch":[[{"diffs":[[0,"ied date"],[1," to be human readable"],[0,"\n      _"]],"start1":5167,"start2":5167,"length1":16,"length2":37}]],"length":10962,"saved":false}
{"ts":1373652214038,"patch":[[{"diffs":[[0,"ize and "],[1,"\""],[0,"last mod"]],"start1":5149,"start2":5149,"length1":16,"length2":17}]],"length":10963,"saved":false}
{"ts":1373652216649,"patch":[[{"diffs":[[0,"ied date"],[1,"\""],[0," to be h"]],"start1":5168,"start2":5168,"length1":16,"length2":17}]],"length":10964,"saved":false}
{"ts":1373652218660,"patch":[[{"diffs":[[0," Format "],[1,"\""],[0,"filesize"]],"start1":5136,"start2":5136,"length1":16,"length2":17}]],"length":10965,"saved":false}
{"ts":1373652220839,"patch":[[{"diffs":[[0,"filesize"],[1,"\""],[0," and \"la"]],"start1":5145,"start2":5145,"length1":16,"length2":17}]],"length":10966,"saved":false}
{"ts":1373652498216,"patch":[[{"diffs":[[0,"rscore')"],[1,",\n    "],[0,";\n\n\nvar "]],"start1":747,"start2":747,"length1":16,"length2":22}]],"length":10972,"saved":false}
{"ts":1373652500769,"patch":[[{"diffs":[[0,"'),\n    "],[1,"case = require()"],[0,";\n\n\nvar "]],"start1":753,"start2":753,"length1":16,"length2":32}]],"length":10988,"saved":false}
{"ts":1373652502490,"patch":[[{"diffs":[[0,"require("],[1,"'case'"],[0,");\n\n\nvar"]],"start1":768,"start2":768,"length1":16,"length2":22}]],"length":10994,"saved":false}
{"ts":1373652505963,"patch":[[{"diffs":[[0,"ase');\n\n"],[1,"Case.upper('foo_bar')                       -> 'FOO BAR'\nCase.lower('fooBar')                        -> 'foo bar'\nCase.snake('Foo bar!')                      -> 'foo_bar'\nCase.squish('foo.bar')                      -> 'FooBar'\nCase.camel('foo, bar')                      -> 'fooBar'\nCase.constant('Foo-Bar')                    -> 'FOO_BAR'\nCase.title('foo v. bar')                    -> 'Foo v. Bar'\nCase.capital('foo_v_bar')                   -> 'Foo V Bar'\nCase.sentence('\"foo!\" said bar', ['Bar'])   -> '\"Foo!\" said Bar'\n"],[0,"\nvar con"]],"start1":778,"start2":778,"length1":16,"length2":540}]],"length":11518,"saved":false}
{"ts":1373652512877,"patch":[[{"diffs":[[0,"'),\n    "],[-1,"c"],[1,"C"],[0,"ase = re"]],"start1":753,"start2":753,"length1":17,"length2":17}]],"length":11518,"saved":false}
{"ts":1373652529646,"patch":[[{"diffs":[[0,"ase');\n\n"],[1,"// "],[0,"Case.upp"]],"start1":778,"start2":778,"length1":16,"length2":19},{"diffs":[[0,"> 'FOO BAR'\n"],[1,"// "],[0,"Case.lower('"]],"start1":834,"start2":834,"length1":24,"length2":27},{"diffs":[[0,"> 'foo bar'\n"],[1,"// "],[0,"Case.snake('"]],"start1":894,"start2":894,"length1":24,"length2":27},{"diffs":[[0,"> 'foo_bar'\n"],[1,"// "],[0,"Case.squish("]],"start1":954,"start2":954,"length1":24,"length2":27},{"diffs":[[0,"-> 'FooBar'\n"],[1,"// "],[0,"Case.camel('"]],"start1":1013,"start2":1013,"length1":24,"length2":27},{"diffs":[[0,"-> 'fooBar'\n"],[1,"// "],[0,"Case.constan"]],"start1":1072,"start2":1072,"length1":24,"length2":27},{"diffs":[[0,"OO_BAR'\n"],[1,"// "],[0,"Case.tit"]],"start1":1136,"start2":1136,"length1":16,"length2":19},{"diffs":[[0,"Foo v. Bar'\n"],[1,"// "],[0,"Case.capital"]],"start1":1195,"start2":1195,"length1":24,"length2":27},{"diffs":[[0," V Bar'\n"],[1,"// "],[0,"Case.sen"]],"start1":1261,"start2":1261,"length1":16,"length2":19}]],"length":11545,"saved":false}
{"ts":1373652533408,"patch":[[{"diffs":[[0,"ase');\n\n"],[1,"\n"],[0,"// Case."]],"start1":778,"start2":778,"length1":16,"length2":17}]],"length":11546,"saved":false}
{"ts":1373652534425,"patch":[[{"diffs":[[0,"e('case');\n\n"],[1,"/"],[0,"\n// Case.upp"]],"start1":774,"start2":774,"length1":24,"length2":25}]],"length":11547,"saved":false}
{"ts":1373652538069,"patch":[[{"diffs":[[0,"se');\n\n/"],[1,"/ TODO: "],[0,"\n// Case"]],"start1":779,"start2":779,"length1":16,"length2":24}]],"length":11555,"saved":false}
{"ts":1373652541581,"patch":[[{"diffs":[[0,"/ TODO: "],[1,"Reserved for later"],[0,"\n// Case"]],"start1":787,"start2":787,"length1":16,"length2":34}]],"length":11573,"saved":false}
{"ts":1373652578587,"patch":[[{"diffs":[[0,"id Bar'\n"],[1,"Case.of('foo')          -> 'lower'\nCase.of('foo_bar')      -> 'snake'\nCase.of('Foo v Bar')    -> 'title'\nCase.of('foo_ Bar')     -> undefined\n\nCase.flip('FlipMe')     -> 'fLIPmE'\nCase.flip('TEST THIS!') -> 'test this!'\n\nCase.type('bang', function(s) {\n    return Case.upper(s, '!')+'!';\n});\nCase.bang('bang')       -> 'BANG!'\nCase.of('TEST!THIS!')   -> 'bang'"],[0,"\nvar con"]],"start1":1357,"start2":1357,"length1":16,"length2":375}]],"length":11932,"saved":false}
{"ts":1373652580502,"patch":[[{"diffs":[[0,"id Bar'\n"],[1,"// "],[0,"Case.of("]],"start1":1357,"start2":1357,"length1":16,"length2":19},{"diffs":[[0,"'lower'\n"],[1,"// "],[0,"Case.of("]],"start1":1395,"start2":1395,"length1":16,"length2":19},{"diffs":[[0,"'snake'\n"],[1,"// "],[0,"Case.of("]],"start1":1433,"start2":1433,"length1":16,"length2":19},{"diffs":[[0,"'title'\n"],[1,"// "],[0,"Case.of("]],"start1":1471,"start2":1471,"length1":16,"length2":19},{"diffs":[[0,"efined\n\n"],[1,"// "],[0,"Case.fli"]],"start1":1512,"start2":1512,"length1":16,"length2":19},{"diffs":[[0,"fLIPmE'\n"],[1,"// "],[0,"Case.fli"]],"start1":1551,"start2":1551,"length1":16,"length2":19},{"diffs":[[0,"this!'\n\n"],[1,"// "],[0,"Case.typ"]],"start1":1595,"start2":1595,"length1":16,"length2":19},{"diffs":[[0,"nction(s) {\n"],[1,"// "],[0,"    return C"]],"start1":1626,"start2":1626,"length1":24,"length2":27},{"diffs":[[0,"')+'!';\n"],[1,"// "],[0,"});\n"],[1,"// "],[0,"Case.ban"]],"start1":1668,"start2":1668,"length1":20,"length2":26},{"diffs":[[0,"'BANG!'\n"],[1,"// "],[0,"Case.of("]],"start1":1713,"start2":1713,"length1":16,"length2":19}]],"length":11965,"saved":false}
{"ts":1373652582192,"patch":[[{"diffs":[[0," 'bang'\n"],[1,"\n\n"],[0,"var conf"]],"start1":1750,"start2":1750,"length1":16,"length2":18}]],"length":11967,"saved":false}
{"ts":1373652584377,"patch":[[{"diffs":[[0,"\" said Bar'\n"],[1,"\n"],[0,"// Case.of('"]],"start1":1353,"start2":1353,"length1":24,"length2":25}]],"length":11968,"saved":false}
{"ts":1373652965131,"patch":[[{"diffs":[[0,"rscore')"],[-1,","],[1,";"],[0,"\n    Cas"]],"start1":747,"start2":747,"length1":17,"length2":17}]],"length":11968,"saved":false}
{"ts":1373652967762,"patch":[[{"diffs":[[0,"');\n    "],[1,"\n  "],[0,"Case = r"]],"start1":753,"start2":753,"length1":16,"length2":19}]],"length":11971,"saved":false}
{"ts":1373652970739,"patch":[[{"diffs":[[0,");\n    \n"],[-1," "],[1,"//"],[0," Case = "]],"start1":754,"start2":754,"length1":17,"length2":18}]],"length":11972,"saved":false}
{"ts":1373653029455,"patch":[[{"diffs":[[0,"\n    \n//"],[-1," "],[0,"Case = r"]],"start1":756,"start2":756,"length1":17,"length2":16}]],"length":11971,"saved":false}
{"ts":1373653030254,"patch":[[{"diffs":[[0,"\n    \n//"],[1," "],[0,"Case = r"]],"start1":756,"start2":756,"length1":16,"length2":17}]],"length":11972,"saved":false}
